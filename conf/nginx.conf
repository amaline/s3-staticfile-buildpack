# Built on <%= ENV["REBUILD_DATE"] %> for instance <%= ENV["CF_INSTANCE_INDEX"] %>

worker_processes auto;
daemon off;

error_log <%= ENV["APP_ROOT"] %>/nginx/logs/error.log;
events { worker_connections 1024; }

http {
  charset utf-8;
  log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
  access_log <%= ENV["APP_ROOT"] %>/nginx/logs/access.log cloudfoundry;
  default_type application/octet-stream;
  include mime.types;
  sendfile on;

  gzip on;
  gzip_disable "msie6";
  gzip_comp_level 6;
  gzip_min_length 1100;
  gzip_buffers 16 8k;
  gzip_proxied any;
  gunzip on;
  gzip_static always;
  gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss;

  tcp_nopush on;
  keepalive_timeout 30;
  port_in_redirect off; # Ensure that redirects don't include the internal container PORT - <%= ENV["PORT"] %>
  server_tokens off;
  
  <% if File.exists?(File.join(ENV["APP_ROOT"],"nginx/conf/.enable_cached_dirs")) %>
  proxy_cache_path <%= ENV["APP_ROOT"] %>/cache levels=1:2 keys_zone=s3_cache:3m max_size=768m
                 inactive=60m use_temp_path=off;
  proxy_cache_path <%= ENV["APP_ROOT"] %>/shortcache levels=1:2 keys_zone=s3_shortcache:3m max_size=768m
                 inactive=15m use_temp_path=off;
  <% end %>

  <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_s3")) %>
  server {
    listen <%= ENV["PORT"] %>;
    server_name localhost;
    index index.html index.htm Default.htm;
    add_header X-uri "$uri";
    add_header X-request-uri "$request_uri";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    set $proxyuri "/";

    <% if File.exists?(File.join(ENV["APP_ROOT"],"nginx/conf/.enable_cached_dirs")) %>
      <% ENV["NGINX_CACHED_DIRS"].split(",").each do |location| %>
        <% dir,expire=location.split(";") %>
      location /<%= dir %> {
      expires <%= expire %>;
      proxy_cache s3_cache;
      proxy_cache_key $host$uri$is_args$args;
      proxy_cache_valid 200 60m;
      proxy_pass http://127.0.0.1:<%= ENV["AWS_SIGNING_PORT"] %>;
    }      
      <% end %>
    <% end %>
    
    <% if File.exists?(File.join(ENV["APP_ROOT"],"nginx/conf/.redirects")) %>
    include <%= ENV["APP_ROOT"] %>/nginx/conf/.redirects;
    <% end %>
      
    location / {
       <% if File.exists?(File.join(ENV["APP_ROOT"],"nginx/conf/.enable_cached_dirs")) %>
             proxy_cache s3_shortcache;
             proxy_cache_key $host$uri$is_args$args;
             proxy_cache_valid 200 15m;
       <% end %>
       <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_pushstate")) %>
       if (!-e $request_filename) {
           rewrite ^(.*)$ / break;
       }
       <% end %>
        
       <% if File.exists?(auth_file = File.join(ENV["APP_ROOT"], "nginx/conf/.htpasswd")) %>
        auth_basic "Restricted";                                #For Basic Auth
        auth_basic_user_file <%= auth_file %>;  #For Basic Auth
       <% end %>
        
       <% if ENV["FORCE_HTTPS"] %>
         if ($http_x_forwarded_proto != "https") {
           return 301 https://$host$request_uri;
         }
       <% end %>  
        
       ssi on;
       proxy_set_header Accept-Encoding "";
       proxy_intercept_errors on;
       error_page 404 =404 @errors;
      
       if ($uri ~ "/[^\./]+$") {
         set $proxyuri "${request_uri}/index.html";
         proxy_pass http://127.0.0.1:<%= ENV["AWS_SIGNING_PORT"] %>$proxyuri; 
       }
       if ($uri ~ "/$") {
         set $proxyuri "${request_uri}index.html";
         proxy_pass http://127.0.0.1:<%= ENV["AWS_SIGNING_PORT"] %>$proxyuri; 
       }
   
        proxy_pass http://127.0.0.1:<%= ENV["AWS_SIGNING_PORT"] %>$request_uri;
    }
    
    location @errors {
    <% if File.exists?(auth_file = File.join(ENV["APP_ROOT"], "nginx/conf/.enable_migration_proxy")) %>
       resolver 8.8.8.8;
       proxy_redirect    <%= ENV["MIGRATION_PROXY"] %>    https://$http_host/;
       proxy_pass <%= ENV["MIGRATION_PROXY"] %>$uri;
    <% else %>
       set $erroruri '<%= ENV["HTML_ERROR_PAGE"] %>';
       proxy_pass http://127.0.0.1:<%= ENV["AWS_SIGNING_PORT"] %>$erroruri;
    <% end %>
    }
    

  }
  <% end %>
 
  server {
    <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_s3")) %>
    listen 127.0.0.1:<%= ENV["AWS_SIGNING_PORT"] %>;
    <% else %>
    listen <%= ENV["PORT"] %>;
    <% end %>
    server_name localhost;
    index index.html index.htm Default.htm;
    location / {

      <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_s3")) %>
           
          aws_access_key <%= ENV["AWS_ACCESS_KEY"] %>; 
          aws_key_scope <%= ENV["AWS_SIGNING_KEY_SCOPE"] %>;
          aws_signing_key <%= ENV["AWS_SIGNING_KEY"] %>; 
          aws_s3_bucket <%= ENV["AWS_S3_BUCKET"] %>;
          aws_endpoint s3.amazonaws.com;
          aws_sign;

          proxy_set_header Accept-Encoding "";
          proxy_pass  http://<%= ENV["AWS_S3_BUCKET"] %>.s3.amazonaws.com;      
      <% else %>
         <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_ssi")) %>
          ssi on;
         <% end %>
          root <%= ENV["APP_ROOT"] %>/public;
         <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_pushstate")) %>
         if (!-e $request_filename) {
            rewrite ^(.*)$ / break;
          }
         <% end %>
         index index.html index.htm Default.htm;
        <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_directory_index")) %>
        autoindex on;
        <% end %>
        <% if File.exists?(auth_file = File.join(ENV["APP_ROOT"], "nginx/conf/.htpasswd")) %>
        auth_basic "Restricted";                                #For Basic Auth
        auth_basic_user_file <%= auth_file %>;  #For Basic Auth
        <% end %>
        <% if ENV["FORCE_HTTPS"] %>
         if ($http_x_forwarded_proto != "https") {
           return 301 https://$host$request_uri;
         }
        <% end %>
      <% end %>

    }
  }
}
